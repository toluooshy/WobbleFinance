"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.symbolOfLookupObj = exports.symbolOfLookupObjExact = void 0;

var _constants = require("../0_constants");

var _utils = require("../0_utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** name to symbol lookup object for exact match
 * @return {[prop:string]: string} a name:symbol object
 */
var symbolOfLookupObjExact = _objectSpread({}, _constants.nameSymbolObj);
/** name to symbol lookup object for non exact match
 * @return {[prop:string]: string} a name:symbol object
 */


exports.symbolOfLookupObjExact = symbolOfLookupObjExact;
var symbolOfLookupObj = (0, _utils.onlyAlphaNumericKey)(_constants.nameSymbolObj);
exports.symbolOfLookupObj = symbolOfLookupObj;