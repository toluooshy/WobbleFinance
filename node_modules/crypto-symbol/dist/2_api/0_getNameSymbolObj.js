"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.symbols = exports.getSymbols = exports.names = exports.getNames = exports.getNameSymbolObj = exports.getIntactNameSymbolObj = void 0;

var _constants = require("../0_constants");

var _data = require("../1_data");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @param {void}
 * @return { [prop:string]:string } the clone of original {name:symbol} WITHOUT custom name symbol pair added by user
 * it is a clone, so it wont affect the original object if you mutate it
 */
var getIntactNameSymbolObj = function getIntactNameSymbolObj() {
  return _objectSpread({}, _constants.nameSymbolObj);
};
/**
 * @param {void}
 * @return { [prop:string]:string } the clone of original {name:symbol} PLUS custom name symbol pair added by user
 * it is a clone, so it wont affect the original object if you mutate it
 */


exports.getIntactNameSymbolObj = getIntactNameSymbolObj;

var getNameSymbolObj = function getNameSymbolObj() {
  return _objectSpread({}, _data.symbolOfLookupObjExact);
};
/**
 * @param {void}
 * @return {string[]} return all the names PLUS custom name in array
 * mutating this will not affecting anything
 */


exports.getNameSymbolObj = getNameSymbolObj;

var getNames = function getNames() {
  return Object.keys(_data.symbolOfLookupObjExact);
};

exports.getNames = getNames;
var names = getNames;
/**
 * @param {void}
 * @return {string[]} return all the symbols PLUS custom symbol in array
 * mutating this will not affecting anything
 */

exports.names = names;

var getSymbols = function getSymbols() {
  return Object.values(_data.symbolOfLookupObjExact);
};

exports.getSymbols = getSymbols;
var symbols = getSymbols;
exports.symbols = symbols;